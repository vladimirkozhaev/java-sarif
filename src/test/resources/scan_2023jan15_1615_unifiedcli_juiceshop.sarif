{
  "version": "2.1.0",
  "$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/cos02/schemas/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://www.mend.io/sast/",
          "name": "mend.sast.engineJS",
          "rules": [
            {
              "id": "js-cmd-inj",
              "name": "JsCommandInjection",
              "shortDescription": {
                "text": "Command Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "help": {
                "text": "Command Injection vulnerability occurs when an application passes unsafe data supplied by the user (forms, cookies, HTTP headers etc.) to a system shell. In this attack operating system commands supplied by the attacker are usually executed with the privileges of the vulnerable application. Successful shell command execution attack can result in arbitrary command execution and a full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Blacklisting forbidden character sequences\n- Whitelisting allowed character sequences\n- Restricting permissions on operating system commands\n- Filtering out command directory names\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-sqli",
              "name": "JsSqlInjection",
              "shortDescription": {
                "text": "SQL Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "help": {
                "text": "SQL Injection vulnerability occurs when a user input is used in the construction of an SQL query without proper user input string neutralization (sanitization). A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown of the DBMS), recover the content of a given file present on the DBMS file system or in some cases issue commands to the operating system\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using prepared statements (with parameterized queries)\n- Correct filtering (escaping) of string literal escape characters in SQL statements, like single quote ('), double quote (\"), backslash (\\) and the NULL byte\n- Checking parameters for valid representation for the give type (integer, float or boolean)\n- Correct database permissions on logon, which restricts web application or user access to unnecessary data\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-code-inj",
              "name": "JsCodeInjection",
              "shortDescription": {
                "text": "Code Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
              "help": {
                "text": "The application constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. When the application allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the application. Such an alteration could lead to arbitrary code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Rejecting any input that does not strictly conform to specifications, or transforming it into something that does\n- When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules\n- To reduce the likelihood of code injection, stringent whitelists that limit which constructs are allowed should be used. If the code that invokes a function is dynamically constructed, then verifying that the input is alphanumeric might be insufficient\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-path-traversal",
              "name": "JsPathDirectoryTraversal",
              "shortDescription": {
                "text": "Path/Directory Traversal vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "help": {
                "text": "Path/Directory Traversal or file disclosure vulnerability occurs when an external input is used to construct a pathname that is intended to identify a file or a directory located underneath a restricted parent directory. The application does not properly neutralize (sanitize) special elements within the pathname, which can cause the pathname to resolve to a location that is outside of the restricted directory. Successful file disclosure attack can result in sensitive files disclosure, and can often lead to full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using a whitelist of directories from which files are allowed for download and validating requests based on that list\n- Indexing files which are allowed for download and passing only their index numbers as the URL parameter values\n- Validating requested file types\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-nosql-inj",
              "name": "JsNosqlInjection",
              "shortDescription": {
                "text": "NoSQL Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/943.html",
              "help": {
                "text": "NoSQL injection vulnerabilities allow attackers to inject code into commands for databases that donâ€™t use SQL queries, such as MongoDB\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-dom-xss",
              "name": "JsDomBasedCrossSiteScripting",
              "shortDescription": {
                "text": "DOM Based Cross-Site Scripting vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "help": {
                "text": "Cross Site Scripting (XSS) vulnerability occurs when an application either does not perform or it performs incorrect neutralization (sanitization) of input data that is included in a web application response. As the result, an attacker is able to inject and execute arbitrary HTML and script code in a user's browser within the context of the vulnerable website. These attacks are often used to steal authentication credentials (e.g. session IDs in cookies). Depending on the vulnerability and the web application, it is also possible to completely alter the web page itself or control the victim's browser\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape HTML before inserting untrusted data into element content\n- Escape attribute before inserting untrusted data into HTML common attributes\n- Escape JavaScript before inserting untrusted data into JavaScript data values\n- Escape CSS and strictly validate before inserting untrusted data into HTML style property values\n- Escape URL before inserting untrusted data into HTML URL parameter values\n- Use HTML policy engine to validate or clean user-driven HTML in an outbound way\n- Use HTTPOnly cookie flag\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-xss",
              "name": "JsCrossSiteScripting",
              "shortDescription": {
                "text": "Cross-Site Scripting vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "help": {
                "text": "Cross Site Scripting (XSS) vulnerability occurs when an application either does not perform or it performs incorrect neutralization (sanitization) of input data that is included in a web application response. As the result, an attacker is able to inject and execute arbitrary HTML and script code in a user's browser within the context of the vulnerable website. These attacks are often used to steal authentication credentials (e.g. session IDs in cookies). Depending on the vulnerability and the web application, it is also possible to completely alter the web page itself or control the victim's browser\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape HTML before inserting untrusted data into element content\n- Escape attribute before inserting untrusted data into HTML common attributes\n- Escape JavaScript before inserting untrusted data into JavaScript data values\n- Escape CSS and strictly validate before inserting untrusted data into HTML style property values\n- Escape URL before inserting untrusted data into HTML URL parameter values\n- Use HTML policy engine to validate or clean user-driven HTML in an outbound way\n- Use HTTPOnly cookie flag\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-hardcoded-creds",
              "name": "JsHardcodedPasswordCredentials",
              "shortDescription": {
                "text": "Hardcoded Password/Credentials vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/798.html",
              "help": {
                "text": "The application contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key. If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-weak-rnd",
              "name": "JsWeakPseudoRandom",
              "shortDescription": {
                "text": "Weak Pseudo-Random vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/338.html",
              "help": {
                "text": "When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Use functions or hardware which use a hardware-based random number generation for all crypto\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-misc",
              "name": "JsMiscellaneousDangerousFunctions",
              "shortDescription": {
                "text": "Miscellaneous Dangerous Functions vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/676.html",
              "help": {
                "text": "Miscellaneous dangerous functions are functions that could introduce a vulnerability of an unpredictable security impact if they are used incorrectly. Functions like LoadLibrary or printStackTrace could result in arbitrary code execution or information disclosure\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Avoid use of potentially dangerous or depreciated functions\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-regex-dos",
              "name": "JsRegexDenialOfServiceRedos",
              "shortDescription": {
                "text": "Regex Denial of Service (ReDoS) vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/400.html",
              "help": {
                "text": "Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time, affecting the availability of the application\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to functions that perform regular expression searches\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-redirect",
              "name": "JsUnvalidatedOpenRedirect",
              "shortDescription": {
                "text": "Unvalidated/Open Redirect vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/601.html",
              "help": {
                "text": "Open Redirect vulnerability occurs when untrusted user input is passed to HTTP location redirect functions or properties. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to location redirection functions or properties\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-log-forge",
              "name": "JsLogForging",
              "shortDescription": {
                "text": "Log Forging vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/117.html",
              "help": {
                "text": "Log Forging vulnerability occurs when an application either does not neutralize (sanitize) or it incorrectly neutralizes output that is written to logs. This can allow an attacker to forge log entries or inject malicious content into log records\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Validating and encoding all input that could be outputed in the log file\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-header-inj",
              "name": "JsHttpHeaderInjection",
              "shortDescription": {
                "text": "HTTP Header Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/113.html",
              "help": {
                "text": "HTTP header injection is a general class of web application security vulnerability which occurs when HTTP headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting, Session fixation via the Set-Cookie header, cross-site scripting (XSS), and malicious redirect attacks via the location header\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to functions that affect response header content\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-resp-split",
              "name": "JsHttpResponseSplitting",
              "shortDescription": {
                "text": "HTTP Response Splitting vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/113.html",
              "help": {
                "text": "HTTP Response Splitting vulnerability occurs when a user input that contains CR (carriage return, also represented by %0d or \\r) and LF (line feed, also represented by %0a or \\n) characters is included in the web application HTTP response headers. The failure to remove CRs and LFs allows an attacker to set arbitrary headers, take control of the body, or break the response into two or more separate responses and allow for different types of attacks such as Cross Site Scripting, cross-user defacement, web cache poisoning and similar exploits\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Remove CRs and LFs (and all other hazardous characters) before embedding data into any HTTP response header, particularly when setting cookies and redirecting\n- Use a whitelist of acceptable inputs that strictly conform to specifications\n- When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-dangerous-func",
              "name": "JsUseOfInherentlyDangerousFunction",
              "shortDescription": {
                "text": "Use of Inherently Dangerous Function vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/242.html",
              "help": {
                "text": "The application calls a function that can never be guaranteed to work safely. Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Ban the use of dangerous functions. Use their safe equivalent\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "js-cookie-inj",
              "name": "JsCookieInjection",
              "shortDescription": {
                "text": "Cookie Injection vulnerability (JavaScript / Node.js)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/20.html",
              "help": {
                "text": "The application does not validate or incorrectly validates input that can affect the control flow or data flow of a program, or in this specific case application cookies. When the application does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does\n"
              },
              "properties": {
                "precision": "high"
              }
            }
          ],
          "version": "22.12.1.2"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "startTimeUtc": "2023-01-15T14:16:03.608Z"
        },
        {
          "endTimeUtc": "2023-01-15T14:19:07.395Z",
          "executionSuccessful": true
        }
      ],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://www.mend.io/sast/",
          "name": "mend.sast.enginePython",
          "rules": [
            {
              "id": "py-cmd-inj",
              "name": "PythonCommandInjection",
              "shortDescription": {
                "text": "Command Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "help": {
                "text": "Command Injection vulnerability occurs when an application passes unsafe data supplied by the user (forms, cookies, HTTP headers etc.) to a system shell. In this attack operating system commands supplied by the attacker are usually executed with the privileges of the vulnerable application. Successful shell command execution attack can result in arbitrary command execution and a full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Blacklisting forbidden character sequences\n- Whitelisting allowed character sequences\n- Restricting permissions on operating system commands\n- Filtering out command directory names\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-sqli",
              "name": "PythonSqlInjection",
              "shortDescription": {
                "text": "SQL Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "help": {
                "text": "SQL Injection vulnerability occurs when a user input is used in the construction of an SQL query without proper user input string neutralization (sanitization). A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown of the DBMS), recover the content of a given file present on the DBMS file system or in some cases issue commands to the operating system\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using prepared statements (with parameterized queries)\n- Correct filtering (escaping) of string literal escape characters in SQL statements, like single quote ('), double quote (\"), backslash (\\) and the NULL byte\n- Checking parameters for valid representation for the give type (integer, float or boolean)\n- Correct database permissions on logon, which restricts web application or user access to unnecessary data\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-xpath-inj",
              "name": "PythonXpathInjection",
              "shortDescription": {
                "text": "XPath Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/643.html",
              "help": {
                "text": "XPath Injection vulnerability occurs when an application uses external input to construct dynamically an XPath expression used to retrieve data from an XML database, but it either does not neutralize (sanitize) or it incorrectly neutralizes that input. This allows an attacker to control the structure of the query. By sending intentionally malformed information to the web site, an attacker can find out how the XML data is structured, or access data that he may not normally have access to.\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape single and double quotes characters\n- Use precompiled XPath\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-code-inj",
              "name": "PythonCodeInjection",
              "shortDescription": {
                "text": "Code Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
              "help": {
                "text": "The application constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. When the application allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the application. Such an alteration could lead to arbitrary code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Rejecting any input that does not strictly conform to specifications, or transforming it into something that does\n- When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules\n- To reduce the likelihood of code injection, stringent whitelists that limit which constructs are allowed should be used. If the code that invokes a function is dynamically constructed, then verifying that the input is alphanumeric might be insufficient\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-path-traversal",
              "name": "PythonPathDirectoryTraversal",
              "shortDescription": {
                "text": "Path/Directory Traversal vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "help": {
                "text": "Path/Directory Traversal or file disclosure vulnerability occurs when an external input is used to construct a pathname that is intended to identify a file or a directory located underneath a restricted parent directory. The application does not properly neutralize (sanitize) special elements within the pathname, which can cause the pathname to resolve to a location that is outside of the restricted directory. Successful file disclosure attack can result in sensitive files disclosure, and can often lead to full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using a whitelist of directories from which files are allowed for download and validating requests based on that list\n- Indexing files which are allowed for download and passing only their index numbers as the URL parameter values\n- Validating requested file types\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-file-manipulation",
              "name": "PythonFileManipulation",
              "shortDescription": {
                "text": "File Manipulation vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/73.html",
              "help": {
                "text": "File Manipulation vulnerability occurs when an application allows user input to control or influence paths or file names that are used in file system operations. This could allow an attacker to access or modify system files or other files that are critical to the application. For example, an application may give an attacker the ability to overwrite a specified file or run with a configuration controlled by the attacker\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escaping special characters from user input\n- Validating file types requested by users\n- Indexing files that are allowed for access and passing only their index numbers as the URL parameter values\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-xss",
              "name": "PythonCrossSiteScripting",
              "shortDescription": {
                "text": "Cross-Site Scripting vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "help": {
                "text": "Cross Site Scripting (XSS) vulnerability occurs when an application either does not perform or it performs incorrect neutralization (sanitization) of input data that is included in a web application response. As the result, an attacker is able to inject and execute arbitrary HTML and script code in a user's browser within the context of the vulnerable website. These attacks are often used to steal authentication credentials (e.g. session IDs in cookies). Depending on the vulnerability and the web application, it is also possible to completely alter the web page itself or control the victim's browser\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape HTML before inserting untrusted data into element content\n- Escape attribute before inserting untrusted data into HTML common attributes\n- Escape JavaScript before inserting untrusted data into JavaScript data values\n- Escape CSS and strictly validate before inserting untrusted data into HTML style property values\n- Escape URL before inserting untrusted data into HTML URL parameter values\n- Use HTML policy engine to validate or clean user-driven HTML in an outbound way\n- Use HTTPOnly cookie flag\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-insecure-ds",
              "name": "PythonDeserializationOfUntrustedData",
              "shortDescription": {
                "text": "Deserialization of Untrusted Data vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/502.html",
              "help": {
                "text": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. When developers place no restrictions on \"gadget chains,\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified\n- When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe\n- Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-hardcoded-creds",
              "name": "PythonHardcodedPasswordCredentials",
              "shortDescription": {
                "text": "Hardcoded Password/Credentials vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/798.html",
              "help": {
                "text": "The application contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key. If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-ldap-inj",
              "name": "PythonLdapInjection",
              "shortDescription": {
                "text": "LDAP Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/90.html",
              "help": {
                "text": "LDAP injection vulnerability occurs when an application constructs all or a part of an LDAP query using a user input, but it either does not neutralize (sanitize) or it incorrectly neutralizes special elements that could modify the intended LDAP query. Successful LDAP injection attack can result in the execution of arbitrary commands such as granting permissions to unauthorized queries and content modification inside the LDAP tree\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Type validation (example: int userinput = Convert.ToInt32(Request.Querystring(\"userinput\"))\n- Pattern validation (example: string email = Regex.IsMatch(Request.Querystring(\"email\"),\"^.+@[^\\.].*\\.[a-z]{2,}$\"))\n- Domain values validation (example: string country = Request.Querystring(???country???) in {???USA???, ???UK???})\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-heap-inspect",
              "name": "PythonHeapInspection",
              "shortDescription": {
                "text": "Heap Inspection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/244.html",
              "help": {
                "text": "When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a \"heap inspection\" attack that reads the sensitive data using memory dumps or other methods. Sensitive data (such as passwords, social security numbers, credit card numbers etc) stored in memory can be leaked if memory is not cleared after use\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Scrub the sensitive data from memory\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-misc",
              "name": "PythonMiscellaneousDangerousFunctions",
              "shortDescription": {
                "text": "Miscellaneous Dangerous Functions vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/676.html",
              "help": {
                "text": "Miscellaneous dangerous functions are functions that could introduce a vulnerability of an unpredictable security impact if they are used incorrectly. Functions like LoadLibrary or printStackTrace could result in arbitrary code execution or information disclosure\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Avoid use of potentially dangerous or depreciated functions\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-hidden-html",
              "name": "PythonHiddenHtmlInput",
              "shortDescription": {
                "text": "Hidden HTML Input vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/472.html",
              "help": {
                "text": "Hidden form inputs are often written into an HTML page by the web server when it serves that page to the client, and are not visible on the rendered web page. Because HTTP is essentially stateless, like cookies, hidden form inputs are one way that web applications can use to remember session data from one page request to the next. Because of poor coding practices, hidden fields often contain confidential information (such as product prices on an e-commerce site) that should be stored only in a back-end database\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Sensitive information that may affect the application logic should be stored only in a back-end database\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-dangerous-ext",
              "name": "PythonDangerousFileExtensions",
              "shortDescription": {
                "text": "Dangerous File Extensions vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/530.html",
              "help": {
                "text": "Dangerous file extensions are files that are part of a web application and which could be incorrectly handled by the web server due to their file extension. When requested directly within a URL, these files could reveal web application source code, or some other sensitive information that could help the attacker in compromising a web application or a database\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Removing all old or backup files from webroot directory\n- Renaming sensitive application files that the web server could handle in an unintended way\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-redirect",
              "name": "PythonUnvalidatedOpenRedirect",
              "shortDescription": {
                "text": "Unvalidated/Open Redirect vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/601.html",
              "help": {
                "text": "Open Redirect vulnerability occurs when untrusted user input is passed to HTTP location redirect functions or properties. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to location redirection functions or properties\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-weak-hash",
              "name": "PythonWeakHashStrength",
              "shortDescription": {
                "text": "Weak Hash Strength vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/916.html",
              "help": {
                "text": "The application generates a hash but it uses a scheme that does not provide a sufficient level of computational effort that would make cracking attacks infeasible or expensive\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-header-inj",
              "name": "PythonHttpHeaderInjection",
              "shortDescription": {
                "text": "HTTP Header Injection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/113.html",
              "help": {
                "text": "HTTP header injection is a general class of web application security vulnerability which occurs when HTTP headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting, Session fixation via the Set-Cookie header, cross-site scripting (XSS), and malicious redirect attacks via the location header\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to functions that affect response header content\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-memcache-inj",
              "name": "PythonMemcacheInjectionVulnerability",
              "shortDescription": {
                "text": "Memcache Injection Vulnerability vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/20.html",
              "help": {
                "text": "Memcache Injection vulnerability occurs when an unvalidated user input is stored in a cache object\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Avoid setting unvalidated user input into a program cache object\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-mail-relay",
              "name": "PythonMailRelay",
              "shortDescription": {
                "text": "Mail Relay vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/20.html",
              "help": {
                "text": "Mail relay vulnerability occurs when unfiltered user input is used as an argument to mail message objects. Successful mail relay attack can result in sending arbitrary e-mail messages to recipients who will think that mail is originated from trusted source\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape CR and LF character sequences\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "py-arb-server-conn",
              "name": "PythonArbitraryServerConnection",
              "shortDescription": {
                "text": "Arbitrary Server Connection vulnerability (Python)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/941.html",
              "help": {
                "text": "Improper use of some service or database access functions could result in arbitrary server / database connection. Arbitrary server / database connection could further result in arbitrary file download, sensitive file disclosure, and in some cases even command execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does\n"
              },
              "properties": {
                "precision": "high"
              }
            }
          ],
          "version": "22.12.1.2"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "startTimeUtc": "2023-01-15T14:16:03.608Z"
        },
        {
          "endTimeUtc": "2023-01-15T14:19:07.395Z",
          "executionSuccessful": true
        }
      ],
      "results": [
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/register/register.component.html"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 54 of the file frontend/src/app/register/register.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 54 of the file frontend/src/app/register/register.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/register/register.component.html"
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 53 of the file frontend/src/app/register/register.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 53 of the file frontend/src/app/register/register.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/register/register.component.html"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 42 of the file frontend/src/app/register/register.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 42 of the file frontend/src/app/register/register.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/register/register.component.html"
                },
                "region": {
                  "startLine": 25
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 25
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 25 of the file frontend/src/app/register/register.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/register/register.component.html"
                          },
                          "region": {
                            "startLine": 25
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 25 of the file frontend/src/app/register/register.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                },
                "region": {
                  "startLine": 82
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 82
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 82 of the file frontend/src/app/forgot-password/forgot-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 82
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 82 of the file frontend/src/app/forgot-password/forgot-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                },
                "region": {
                  "startLine": 81
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 81
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 81 of the file frontend/src/app/forgot-password/forgot-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 81
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 81 of the file frontend/src/app/forgot-password/forgot-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                },
                "region": {
                  "startLine": 66
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 66 of the file frontend/src/app/forgot-password/forgot-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 66 of the file frontend/src/app/forgot-password/forgot-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 53 of the file frontend/src/app/forgot-password/forgot-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/forgot-password/forgot-password.component.html"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 53 of the file frontend/src/app/forgot-password/forgot-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/login/login.component.html"
                },
                "region": {
                  "startLine": 27
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/login/login.component.html"
                          },
                          "region": {
                            "startLine": 27
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 27 of the file frontend/src/app/login/login.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/login/login.component.html"
                          },
                          "region": {
                            "startLine": 27
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 27 of the file frontend/src/app/login/login.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/change-password/change-password.component.html"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/change-password/change-password.component.html"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 51 of the file frontend/src/app/change-password/change-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/change-password/change-password.component.html"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 51 of the file frontend/src/app/change-password/change-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/change-password/change-password.component.html"
                },
                "region": {
                  "startLine": 33
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/change-password/change-password.component.html"
                          },
                          "region": {
                            "startLine": 33
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 33 of the file frontend/src/app/change-password/change-password.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/change-password/change-password.component.html"
                          },
                          "region": {
                            "startLine": 33
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 33 of the file frontend/src/app/change-password/change-password.component.html, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "py-misc",
          "level": "warning",
          "message": {
            "text": "File Upload is often misused by hackers to compromise web application security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/photo-wall/photo-wall.component.html"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/photo-wall/photo-wall.component.html"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Tainted input \"File Upload - file\" was received in line 51 of the file frontend/src/app/photo-wall/photo-wall.component.html:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/photo-wall/photo-wall.component.html"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"File Upload - file\" in line 51 of the file frontend/src/app/photo-wall/photo-wall.component.html, causing a Medium risk Miscellaneous Dangerous Functions vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://www.mend.io/sast/",
          "name": "mend.sast.engineTS",
          "rules": [
            {
              "id": "ts-cmd-inj",
              "name": "TsCommandInjection",
              "shortDescription": {
                "text": "Command Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/78.html",
              "help": {
                "text": "Command Injection vulnerability occurs when an application passes unsafe data supplied by the user (forms, cookies, HTTP headers etc.) to a system shell. In this attack operating system commands supplied by the attacker are usually executed with the privileges of the vulnerable application. Successful shell command execution attack can result in arbitrary command execution and a full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Blacklisting forbidden character sequences\n- Whitelisting allowed character sequences\n- Restricting permissions on operating system commands\n- Filtering out command directory names\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-sqli",
              "name": "TsSqlInjection",
              "shortDescription": {
                "text": "SQL Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "help": {
                "text": "SQL Injection vulnerability occurs when a user input is used in the construction of an SQL query without proper user input string neutralization (sanitization). A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown of the DBMS), recover the content of a given file present on the DBMS file system or in some cases issue commands to the operating system\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using prepared statements (with parameterized queries)\n- Correct filtering (escaping) of string literal escape characters in SQL statements, like single quote ('), double quote (\"), backslash (\\) and the NULL byte\n- Checking parameters for valid representation for the give type (integer, float or boolean)\n- Correct database permissions on logon, which restricts web application or user access to unnecessary data\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-code-inj",
              "name": "TsCodeInjection",
              "shortDescription": {
                "text": "Code Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/94.html",
              "help": {
                "text": "The application constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. When the application allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the application. Such an alteration could lead to arbitrary code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Rejecting any input that does not strictly conform to specifications, or transforming it into something that does\n- When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules\n- To reduce the likelihood of code injection, stringent whitelists that limit which constructs are allowed should be used. If the code that invokes a function is dynamically constructed, then verifying that the input is alphanumeric might be insufficient\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-path-traversal",
              "name": "TsPathDirectoryTraversal",
              "shortDescription": {
                "text": "Path/Directory Traversal vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "help": {
                "text": "Path/Directory Traversal or file disclosure vulnerability occurs when an external input is used to construct a pathname that is intended to identify a file or a directory located underneath a restricted parent directory. The application does not properly neutralize (sanitize) special elements within the pathname, which can cause the pathname to resolve to a location that is outside of the restricted directory. Successful file disclosure attack can result in sensitive files disclosure, and can often lead to full system compromise\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Using a whitelist of directories from which files are allowed for download and validating requests based on that list\n- Indexing files which are allowed for download and passing only their index numbers as the URL parameter values\n- Validating requested file types\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-nosql-inj",
              "name": "TsNosqlInjection",
              "shortDescription": {
                "text": "NoSQL Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/943.html",
              "help": {
                "text": "NoSQL injection vulnerabilities allow attackers to inject code into commands for databases that donâ€™t use SQL queries, such as MongoDB\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-dom-xss",
              "name": "TsDomBasedCrossSiteScripting",
              "shortDescription": {
                "text": "DOM Based Cross-Site Scripting vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "help": {
                "text": "Cross Site Scripting (XSS) vulnerability occurs when an application either does not perform or it performs incorrect neutralization (sanitization) of input data that is included in a web application response. As the result, an attacker is able to inject and execute arbitrary HTML and script code in a user's browser within the context of the vulnerable website. These attacks are often used to steal authentication credentials (e.g. session IDs in cookies). Depending on the vulnerability and the web application, it is also possible to completely alter the web page itself or control the victim's browser\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape HTML before inserting untrusted data into element content\n- Escape attribute before inserting untrusted data into HTML common attributes\n- Escape JavaScript before inserting untrusted data into JavaScript data values\n- Escape CSS and strictly validate before inserting untrusted data into HTML style property values\n- Escape URL before inserting untrusted data into HTML URL parameter values\n- Use HTML policy engine to validate or clean user-driven HTML in an outbound way\n- Use HTTPOnly cookie flag\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-xss",
              "name": "TsCrossSiteScripting",
              "shortDescription": {
                "text": "Cross-Site Scripting vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "help": {
                "text": "Cross Site Scripting (XSS) vulnerability occurs when an application either does not perform or it performs incorrect neutralization (sanitization) of input data that is included in a web application response. As the result, an attacker is able to inject and execute arbitrary HTML and script code in a user's browser within the context of the vulnerable website. These attacks are often used to steal authentication credentials (e.g. session IDs in cookies). Depending on the vulnerability and the web application, it is also possible to completely alter the web page itself or control the victim's browser\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Escape HTML before inserting untrusted data into element content\n- Escape attribute before inserting untrusted data into HTML common attributes\n- Escape JavaScript before inserting untrusted data into JavaScript data values\n- Escape CSS and strictly validate before inserting untrusted data into HTML style property values\n- Escape URL before inserting untrusted data into HTML URL parameter values\n- Use HTML policy engine to validate or clean user-driven HTML in an outbound way\n- Use HTTPOnly cookie flag\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-hardcoded-creds",
              "name": "TsHardcodedPasswordCredentials",
              "shortDescription": {
                "text": "Hardcoded Password/Credentials vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/798.html",
              "help": {
                "text": "The application contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key. If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-weak-rnd",
              "name": "TsWeakPseudoRandom",
              "shortDescription": {
                "text": "Weak Pseudo-Random vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/338.html",
              "help": {
                "text": "When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Use functions or hardware which use a hardware-based random number generation for all crypto\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-misc",
              "name": "TsMiscellaneousDangerousFunctions",
              "shortDescription": {
                "text": "Miscellaneous Dangerous Functions vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/676.html",
              "help": {
                "text": "Miscellaneous dangerous functions are functions that could introduce a vulnerability of an unpredictable security impact if they are used incorrectly. Functions like LoadLibrary or printStackTrace could result in arbitrary code execution or information disclosure\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Avoid use of potentially dangerous or depreciated functions\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-regex-dos",
              "name": "TsRegexDenialOfServiceRedos",
              "shortDescription": {
                "text": "Regex Denial of Service (ReDoS) vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/400.html",
              "help": {
                "text": "Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time, affecting the availability of the application\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to functions that perform regular expression searches\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-redirect",
              "name": "TsUnvalidatedOpenRedirect",
              "shortDescription": {
                "text": "Unvalidated/Open Redirect vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/601.html",
              "help": {
                "text": "Open Redirect vulnerability occurs when untrusted user input is passed to HTTP location redirect functions or properties. By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts may have a more trustworthy appearance\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to location redirection functions or properties\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-log-forge",
              "name": "TsLogForging",
              "shortDescription": {
                "text": "Log Forging vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/117.html",
              "help": {
                "text": "Log Forging vulnerability occurs when an application either does not neutralize (sanitize) or it incorrectly neutralizes output that is written to logs. This can allow an attacker to forge log entries or inject malicious content into log records\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Validating and encoding all input that could be outputed in the log file\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-header-inj",
              "name": "TsHttpHeaderInjection",
              "shortDescription": {
                "text": "HTTP Header Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/113.html",
              "help": {
                "text": "HTTP header injection is a general class of web application security vulnerability which occurs when HTTP headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting, Session fixation via the Set-Cookie header, cross-site scripting (XSS), and malicious redirect attacks via the location header\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Do not pass untrusted user input to functions that affect response header content\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-resp-split",
              "name": "TsHttpResponseSplitting",
              "shortDescription": {
                "text": "HTTP Response Splitting vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/113.html",
              "help": {
                "text": "HTTP Response Splitting vulnerability occurs when a user input that contains CR (carriage return, also represented by %0d or \\r) and LF (line feed, also represented by %0a or \\n) characters is included in the web application HTTP response headers. The failure to remove CRs and LFs allows an attacker to set arbitrary headers, take control of the body, or break the response into two or more separate responses and allow for different types of attacks such as Cross Site Scripting, cross-user defacement, web cache poisoning and similar exploits\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Remove CRs and LFs (and all other hazardous characters) before embedding data into any HTTP response header, particularly when setting cookies and redirecting\n- Use a whitelist of acceptable inputs that strictly conform to specifications\n- When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-dangerous-func",
              "name": "TsUseOfInherentlyDangerousFunction",
              "shortDescription": {
                "text": "Use of Inherently Dangerous Function vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/242.html",
              "help": {
                "text": "The application calls a function that can never be guaranteed to work safely. Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Ban the use of dangerous functions. Use their safe equivalent\n"
              },
              "properties": {
                "precision": "high"
              }
            },
            {
              "id": "ts-cookie-inj",
              "name": "TsCookieInjection",
              "shortDescription": {
                "text": "Cookie Injection vulnerability (TypeScript)"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/20.html",
              "help": {
                "text": "The application does not validate or incorrectly validates input that can affect the control flow or data flow of a program, or in this specific case application cookies. When the application does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution\n\n\u003cb\u003eRecommendations:\u003c/b\u003e\n- Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does\n"
              },
              "properties": {
                "precision": "high"
              }
            }
          ],
          "version": "22.12.1.2"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "startTimeUtc": "2023-01-15T14:16:03.608Z"
        },
        {
          "endTimeUtc": "2023-01-15T14:19:07.395Z",
          "executionSuccessful": true
        }
      ],
      "results": [
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 20 of the file data/static/codefixes/loginJimChallenge_4.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 20 of the file data/static/codefixes/loginJimChallenge_4.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 17 of the file data/static/codefixes/loginBenderChallenge_4.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 17 of the file data/static/codefixes/loginBenderChallenge_4.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                },
                "region": {
                  "startLine": 6
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.query\" was received in line 3 of the file data/static/codefixes/unionSqlInjectionChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"criteria\" in line 3 of the file data/static/codefixes/unionSqlInjectionChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 4
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"criteria\" in line 4 of the file data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 6
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 6 of the file data/static/codefixes/unionSqlInjectionChallenge_1.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 18 of the file data/static/codefixes/loginBenderChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 18 of the file data/static/codefixes/loginBenderChallenge_3.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                },
                "region": {
                  "startLine": 10
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.query\" was received in line 3 of the file data/static/codefixes/unionSqlInjectionChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"criteria\" in line 3 of the file data/static/codefixes/unionSqlInjectionChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 4
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"criteria\" in line 4 of the file data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/unionSqlInjectionChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 10
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 10 of the file data/static/codefixes/unionSqlInjectionChallenge_3.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 20 of the file data/static/codefixes/loginBenderChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 20 of the file data/static/codefixes/loginBenderChallenge_1.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/dbSchemaChallenge_1.ts"
                },
                "region": {
                  "startLine": 5
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.query\" was received in line 3 of the file data/static/codefixes/dbSchemaChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 3
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"criteria\" in line 3 of the file data/static/codefixes/dbSchemaChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 4
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"criteria\" in line 4 of the file data/static/codefixes/dbSchemaChallenge_1.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 5
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 5 of the file data/static/codefixes/dbSchemaChallenge_1.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/search.ts"
                },
                "region": {
                  "startLine": 23
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/search.ts"
                          },
                          "region": {
                            "startLine": 21
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.query\" was received in line 21 of the file routes/search.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/search.ts"
                          },
                          "region": {
                            "startLine": 21
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"criteria\" in line 21 of the file routes/search.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/search.ts"
                          },
                          "region": {
                            "startLine": 22
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"criteria\" in line 22 of the file routes/search.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/search.ts"
                          },
                          "region": {
                            "startLine": 23
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 23 of the file routes/search.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 20 of the file data/static/codefixes/loginAdminChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 20 of the file data/static/codefixes/loginAdminChallenge_1.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login.ts"
                },
                "region": {
                  "startLine": 36
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/login.ts"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 36 of the file routes/login.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/login.ts"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 36 of the file routes/login.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/dbSchemaChallenge_3.ts"
                },
                "region": {
                  "startLine": 11
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 5
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.query\" was received in line 5 of the file data/static/codefixes/dbSchemaChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 5
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"criteria\" in line 5 of the file data/static/codefixes/dbSchemaChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 6
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"criteria\" in line 6 of the file data/static/codefixes/dbSchemaChallenge_3.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/dbSchemaChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 11
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 11 of the file data/static/codefixes/dbSchemaChallenge_3.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-sqli",
          "level": "error",
          "message": {
            "text": "Use of query() function can result in SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 17 of the file data/static/codefixes/loginJimChallenge_2.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"models.sequelize.query\" in line 17 of the file data/static/codefixes/loginJimChallenge_2.ts, causing a High risk SQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-path-traversal",
          "level": "error",
          "message": {
            "text": "Use of readFileSync() function can result in File Disclosure vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/vulnCodeFixes.ts"
                },
                "region": {
                  "startLine": 82
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.params\" was received in line 58 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"key\" in line 58 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 82
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"fs.readFileSync\" in line 82 of the file routes/vulnCodeFixes.ts, causing a High risk Path/Directory Traversal vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-path-traversal",
          "level": "error",
          "message": {
            "text": "Use of readFileSync() function can result in File Disclosure vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/vulnCodeFixes.ts"
                },
                "region": {
                  "startLine": 82
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 72 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"key\" in line 72 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 82
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"fs.readFileSync\" in line 82 of the file routes/vulnCodeFixes.ts, causing a High risk Path/Directory Traversal vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-path-traversal",
          "level": "error",
          "message": {
            "text": "Use of createWriteStream() function can result in arbitrary File Creation vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/profileImageUrlUpload.ts"
                },
                "region": {
                  "startLine": 31
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 18 of the file routes/profileImageUrlUpload.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"url_1\" in line 18 of the file routes/profileImageUrlUpload.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 30
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"ext_1\" in line 30 of the file routes/profileImageUrlUpload.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 31
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"fs.createWriteStream\" in line 31 of the file routes/profileImageUrlUpload.ts, causing a High risk Path/Directory Traversal vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-path-traversal",
          "level": "error",
          "message": {
            "text": "Use of readFileSync() function can result in File Disclosure vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/vulnCodeFixes.ts"
                },
                "region": {
                  "startLine": 82
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.params\" was received in line 58 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"key\" in line 58 of the file routes/vulnCodeFixes.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"key\" in line 72 of the file routes/vulnCodeFixes.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/vulnCodeFixes.ts"
                          },
                          "region": {
                            "startLine": 82
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"fs.readFileSync\" in line 82 of the file routes/vulnCodeFixes.ts, causing a High risk Path/Directory Traversal vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-nosql-inj",
          "level": "error",
          "message": {
            "text": "Attacker may be in position of changing sensitive database values."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/updateProductReviews.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/updateProductReviews.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 17 of the file routes/updateProductReviews.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/updateProductReviews.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"db.reviews.update\" in line 17 of the file routes/updateProductReviews.ts, causing a High risk NoSQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-nosql-inj",
          "level": "error",
          "message": {
            "text": "Attacker may be in position of changing sensitive database values."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/profileImageUrlUpload.ts"
                },
                "region": {
                  "startLine": 32
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 18 of the file routes/profileImageUrlUpload.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"url_1\" in line 18 of the file routes/profileImageUrlUpload.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 30
                          }
                        },
                        "message": {
                          "text": "which is further passed on to the value of \"ext_1\" in line 30 of the file routes/profileImageUrlUpload.ts"
                        }
                      }
                    },
                    {
                      "executionOrder": 4,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/profileImageUrlUpload.ts"
                          },
                          "region": {
                            "startLine": 32
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"user.update\" in line 32 of the file routes/profileImageUrlUpload.ts, causing a High risk NoSQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-nosql-inj",
          "level": "error",
          "message": {
            "text": "Attacker may be in position of changing sensitive database values."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/noSqlReviewsChallenge_3_correct.ts"
                },
                "region": {
                  "startLine": 14
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/noSqlReviewsChallenge_3_correct.ts"
                          },
                          "region": {
                            "startLine": 14
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 14 of the file data/static/codefixes/noSqlReviewsChallenge_3_correct.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/noSqlReviewsChallenge_3_correct.ts"
                          },
                          "region": {
                            "startLine": 14
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"db.reviews.update\" in line 14 of the file data/static/codefixes/noSqlReviewsChallenge_3_correct.ts, causing a High risk NoSQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-nosql-inj",
          "level": "error",
          "message": {
            "text": "Attacker may be in position of changing sensitive database values."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/noSqlReviewsChallenge_1.ts"
                },
                "region": {
                  "startLine": 14
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/noSqlReviewsChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 14
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 14 of the file data/static/codefixes/noSqlReviewsChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/noSqlReviewsChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 14
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"db.reviews.update\" in line 14 of the file data/static/codefixes/noSqlReviewsChallenge_1.ts, causing a High risk NoSQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-nosql-inj",
          "level": "error",
          "message": {
            "text": "Attacker may be in position of changing sensitive database values."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/likeProductReviews.ts"
                },
                "region": {
                  "startLine": 28
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/likeProductReviews.ts"
                          },
                          "region": {
                            "startLine": 16
                          }
                        },
                        "message": {
                          "text": "Tainted input \"req.body\" was received in line 16 of the file routes/likeProductReviews.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/likeProductReviews.ts"
                          },
                          "region": {
                            "startLine": 16
                          }
                        },
                        "message": {
                          "text": "the value is then passed on to the value of \"id\" in line 16 of the file routes/likeProductReviews.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 3,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/likeProductReviews.ts"
                          },
                          "region": {
                            "startLine": 28
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"db.reviews.update\" in line 28 of the file routes/likeProductReviews.ts, causing a High risk NoSQL Injection vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/2fa.ts"
                },
                "region": {
                  "startLine": 168
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/2fa.ts"
                          },
                          "region": {
                            "startLine": 168
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 168 of the file routes/2fa.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/2fa.ts"
                          },
                          "region": {
                            "startLine": 168
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 168 of the file routes/2fa.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/login.ts"
                },
                "region": {
                  "startLine": 36
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/login.ts"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 36 of the file routes/login.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/login.ts"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 36 of the file routes/login.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 20 of the file data/static/codefixes/loginAdminChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 20 of the file data/static/codefixes/loginAdminChallenge_1.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 17 of the file data/static/codefixes/loginJimChallenge_2.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 17 of the file data/static/codefixes/loginJimChallenge_2.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 20 of the file data/static/codefixes/loginJimChallenge_4.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginJimChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 20 of the file data/static/codefixes/loginJimChallenge_4.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginAdminChallenge_2.ts"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 18 of the file data/static/codefixes/loginAdminChallenge_2.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginAdminChallenge_2.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 18 of the file data/static/codefixes/loginAdminChallenge_2.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/two-factor-auth/two-factor-auth.component.ts"
                },
                "region": {
                  "startLine": 64
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/two-factor-auth/two-factor-auth.component.ts"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 64 of the file frontend/src/app/two-factor-auth/two-factor-auth.component.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/two-factor-auth/two-factor-auth.component.ts"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 64 of the file frontend/src/app/two-factor-auth/two-factor-auth.component.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                },
                "region": {
                  "startLine": 18
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 18 of the file data/static/codefixes/loginBenderChallenge_3.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_3.ts"
                          },
                          "region": {
                            "startLine": 18
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 18 of the file data/static/codefixes/loginBenderChallenge_3.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 20 of the file data/static/codefixes/loginBenderChallenge_1.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_1.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 20 of the file data/static/codefixes/loginBenderChallenge_1.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-hardcoded-creds",
          "level": "warning",
          "message": {
            "text": "Some variables and data in code can contain sensitive information."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Hardcoded Credentials\" was received in line 17 of the file data/static/codefixes/loginBenderChallenge_4.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/static/codefixes/loginBenderChallenge_4.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Hardcoded Credentials\" in line 17 of the file data/static/codefixes/loginBenderChallenge_4.ts, causing a Medium risk Hardcoded Password/Credentials vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/datacreator.ts"
                },
                "region": {
                  "startLine": 224
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 224
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 224 of the file data/datacreator.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 224
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 224 of the file data/datacreator.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/datacreator.ts"
                },
                "region": {
                  "startLine": 290
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 290
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 290 of the file data/datacreator.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 290
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 290 of the file data/datacreator.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/datacreator.ts"
                },
                "region": {
                  "startLine": 668
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 668
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 668 of the file data/datacreator.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 668
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 668 of the file data/datacreator.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "frontend/src/app/code-fixes/code-fixes.component.ts"
                },
                "region": {
                  "startLine": 34
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/code-fixes/code-fixes.component.ts"
                          },
                          "region": {
                            "startLine": 34
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 34 of the file frontend/src/app/code-fixes/code-fixes.component.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "frontend/src/app/code-fixes/code-fixes.component.ts"
                          },
                          "region": {
                            "startLine": 34
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 34 of the file frontend/src/app/code-fixes/code-fixes.component.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/insecurity.ts"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.ts"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 54 of the file lib/insecurity.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "lib/insecurity.ts"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 54 of the file lib/insecurity.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/captcha.ts"
                },
                "region": {
                  "startLine": 15
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 15
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 15 of the file routes/captcha.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 15
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 15 of the file routes/captcha.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/captcha.ts"
                },
                "region": {
                  "startLine": 16
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 16
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 16 of the file routes/captcha.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 16
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 16 of the file routes/captcha.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/captcha.ts"
                },
                "region": {
                  "startLine": 17
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 17 of the file routes/captcha.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 17
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 17 of the file routes/captcha.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/captcha.ts"
                },
                "region": {
                  "startLine": 19
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 19
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 19 of the file routes/captcha.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 19
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 19 of the file routes/captcha.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "routes/captcha.ts"
                },
                "region": {
                  "startLine": 20
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 20 of the file routes/captcha.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "routes/captcha.ts"
                          },
                          "region": {
                            "startLine": 20
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 20 of the file routes/captcha.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "ts-weak-rnd",
          "level": "warning",
          "message": {
            "text": "It is not advised to use weak random generator methods."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "data/datacreator.ts"
                },
                "region": {
                  "startLine": 242
                }
              }
            }
          ],
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "executionOrder": 1,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 242
                          }
                        },
                        "message": {
                          "text": "Tainted input \"Weak Random\" was received in line 242 of the file data/datacreator.ts:"
                        }
                      }
                    },
                    {
                      "executionOrder": 2,
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "data/datacreator.ts"
                          },
                          "region": {
                            "startLine": 242
                          }
                        },
                        "message": {
                          "text": "and finally passed unsanitized into a sensitive sink function \"Weak Random\" in line 242 of the file data/datacreator.ts, causing a Medium risk Weak Pseudo-Random vulnerability:"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}